generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("update_at")
  email     String   @unique
  name      String?
  password  String

  wordInterval    Int?              @default(50) @map("word_interval")
  breakInterval   Int?              @default(10) @map("break_interval")
  intervalCount   Int?              @default(7) @map("interval_count")
  tasks           Task[]
  timeBlock       TimeBlock[]
  pomodoroSession PomodoroSession[]

  @@map("user")
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("update_at")

  name        String
  priority    Priority?
  isCompleted Boolean?  @default(false) @map("is_completed")
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id")

  @@map("task")
}

model TimeBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("update_at")

  name     String
  color    String?
  duration Int
  order    Int     @default(1)
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @map("user_id")

  @@map("time_block")
}

model PomodoroSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("update_at")

  isCompeted    Boolean?        @default(false) @map("is_completed")
  user          User            @relation(fields: [userId], references: [id])
  userId        String          @map("user_id")
  round PomodoroRound[]

  @@map("pomodoro_session")
}

model PomodoroRound {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("update_at")
  totalSeconds Int @map("total_seconds")
  isCompeted      Boolean?        @default(false) @map("is_completed")
  pomodoroSession PomodoroSession @relation(fields: [pomodoroId], references: [id], onDelete: Cascade)
  pomodoroId      String          @map("pomodoro_id")

  @@map("pomodoro_round")
}

enum Priority {
  low
  medium
  high
}
